apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: mediaserver-ingress
  annotations: 
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    #nginx.ingress.kubernetes.io/configuration-snippet: |
    #  proxy_set_header Upgrade "websocket";
    #  proxy_set_header Connection "Upgrade";    
spec:
  rules:
  - http:
      paths:
      - path: /ws
        backend:
          serviceName: mediaserver-svc
          servicePort: 9981
---

apiVersion: v1
kind: Service
metadata:
  name: mediaserver-svc
  labels:
    app: mediaserver
spec:
  type: NodePort  #[ClusterIP|NodePort|LoadBalancer|ExternalName]
  sessionAffinity: ClientIP  #[ClientIP|None]
  selector:
    app: mediaserver
  externalIPs:
  - 192.168.88.133
  ports:
  - name: ws
    protocol: TCP  
    port: 9981
  - name: ice
    protocol: TCP
    port: 3478  
  #- name: ice-udp
  #  protocol: UDP 
  #  port: 3478
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mediaserver-sts
  labels:
    app: mediaserver
spec:
  serviceName: "mediaserver-svc"
  selector:
    matchLabels:
      app: mediaserver
  replicas: 1 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: mediaserver
    spec:
      nodeSelector: 
        kubernetes.io/hostname: node.master.192.168.88.133
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname # node label
        whenUnsatisfiable: DoNotSchedule # [DoNotSchedule/ScheduleAnyway]
        labelSelector:
          matchLabels:
            app: mediaserver
      containers:
      - name: mediaserver
        image: 192.168.88.133:5000/mediaserver:1.0.1
        ports:
        - name: ws
          containerPort: 9981
          protocol: TCP
        - name: ice
          containerPort: 3478
          protocol: TCP
        - name: ice-udp
          containerPort: 3478
          protocol: UDP
        volumeMounts:
        #- mountPath: /app/live/mediaserver/log
        #  name: hostlog
        command: ["/app/live/mediaserver/script/docker_init.sh"]
        args: []
      volumes:
      - name: hostlog
        hostPath:
          path: /tmp/mediaserver/log/
      restartPolicy: Always